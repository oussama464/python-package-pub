# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  - master
variables:
  # Agent VM image name
  vmImageName: "ubuntu-latest"

stages:
  - stage: Archive
    displayName: Archive stage
    jobs:
      - job: build
        displayName: Build

        pool:
          vmImage: $(vmImageName)
        strategy:
          matrix:
            Python38:
              python.version: "3.8"

        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: "$(python.version)"
            displayName: "Use Python $(python.version)"
          - script: |
              python -m pip install --upgrade pip
              python -m pip install --upgrade build setuptools twine wheel
            displayName: "Install dependencies"
          - script: |
              python -m build
            displayName: "Artifact Creation"
          - script: |
              unzip -l dist/*.whl && tar --list -f dist/*.tar.gz
              echo $(System.DefaultWorkingDirectory)/$(Build.BuildId)
              ls $(System.DefaultWorkingDirectory)
              echo $(Build.ArtifactStagingDirectory)
              ls -al $(Build.ArtifactStagingDirectory)
              echo $(System.ArtifactsDirectory)
              ls -al $(System.ArtifactsDirectory)
            displayName: "Display build files"
          - task: CopyFiles@2
            inputs:
              Contents: "**/dist/*"
              TargetFolder: "$(build.artifactstagingdirectory)"

          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: "$(Build.ArtifactStagingDirectory)"
              ArtifactName: "dist"
              publishLocation: "Container"
          - task: SonarQubePrepare@5
            inputs:
              SonarQube: 'codesacan'
              scannerMode: 'CLI'
              configMode: 'file'
          - task: SonarQubeAnalyze@5
          - task: SonarQubePublish@5
            inputs:
              pollingTimeoutSec: '300'

