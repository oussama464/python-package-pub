# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  - master
variables:
  # Agent VM image name
  vmImageName: "ubuntu-latest"

stages:
  - stage: Archive
    displayName: Archive stage
    jobs:
      - job: build
        displayName: Build

        pool:
          vmImage: $(vmImageName)
        strategy:
          matrix:
            Python38:
              python.version: "3.8"

        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: "$(python.version)"
            displayName: "Use Python $(python.version)"
          - script: |
              python -m pip install --upgrade pip
              python -m pip install --upgrade build setuptools twine wheel
            displayName: "Install dependencies"
          - script: |
              python -m build
            displayName: "Artifact Creation"
          - script: |
              unzip -l dist/*.whl && tar --list -f dist/*.tar.gz
              echo $(System.DefaultWorkingDirectory)/$(Build.BuildId)
              ls $(System.DefaultWorkingDirectory)
              echo $(Build.ArtifactStagingDirectory)
              ls -al $(Build.ArtifactStagingDirectory)
              echo $(System.ArtifactsDirectory)
              ls -al $(System.ArtifactsDirectory)
            displayName: "Display build files"
          - task: ArchiveFiles@2
            displayName: "Archive files"
            inputs:
              rootFolderOrFile: "$(System.DefaultWorkingDirectory)/dist"
              includeRootFolder: false
              archiveType: zip
              archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
              replaceExistingArchive: true

          - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
            displayName: "publish artifact"
            artifact: dist

      - job: publish
        displayName: publish package
        steps:
          - task: TwineAuthenticate@1
            displayName: "Twine Authenticate "
            inputs:
              artifactFeed: "Feature Rich Epic/demofeed"
          - script: |
              unzip -l $(Pipeline.Workspace)/dist/$(Build.BuildId).zip
              unzip -l $(Pipeline.Workspace)/dist/$(Build.BuildId).zip
              python -m twine upload -r "demofeed" --config-file $(PYPIRC_PATH) $(Pipeline.Workspace)/dist/$(Build.BuildId)/*
            displayName: "twine upload artifact to feed"
